!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
IN	quadtree.h	8;"	d
INIT_LIST_HEAD	list.h	53;"	d
LIST_HEAD	list.h	50;"	d
LIST_HEAD_INIT	list.h	48;"	d
MAX_LIST_INDEX	quadtree.c	296;"	d	file:
MAX_OBJECTS_NUM	bench.c	75;"	d	file:
NE	quadtree.h	/^    NE = 0,$/;"	e	enum:__anon1
NW	quadtree.h	/^    NW = 1,$/;"	e	enum:__anon1
OUT	quadtree.h	9;"	d
QBOX_OVERLAP_MAX	quadtree.h	18;"	d
QBOX_OVERLAP_MIN	quadtree.h	19;"	d
QTREE_DEPTH_MAX	quadtree.h	21;"	d
QTREE_DEPTH_MIN	quadtree.h	22;"	d
QUADRANT_BITS	quadtree.h	24;"	d
QUADTREE_H_INCLUDED	quadtree.h	6;"	d
QUAD_SUBNODES	quadtree.h	16;"	d
QuadrantEnum	quadtree.h	/^}QuadrantEnum;$/;"	t	typeref:enum:__anon1
SE	quadtree.h	/^    SE = 3$/;"	e	enum:__anon1
SW	quadtree.h	/^    SW = 2,$/;"	e	enum:__anon1
_LIST_H_	list.h	11;"	d
__init__	quadtree.py	/^    def __init__(self,libname):$/;"	m	class:quadtree
__inline__	list.h	21;"	d
__list_add	list.h	/^static __inline__ void __list_add(struct list_head * new_node,$/;"	f
__list_del	list.h	/^static __inline__ void __list_del(struct list_head * prev,$/;"	f
_box	quadtree.h	/^     quadbox_t _box;$/;"	m	struct:quadtree_object
_box	quadtree.h	/^    quadbox_t             _box;                        \/* node bound box *\/$/;"	m	struct:_quadnode_t
_depth	quadtree.h	/^    int                 _depth;                   \/* max depth of tree: 0-based *\/$/;"	m	struct:_quadtree_t
_lst	quadtree.h	/^    struct list_head        _lst;                              \/* node data list*\/$/;"	m	struct:_quadnode_t	typeref:struct:_quadnode_t::list_head
_overlap	quadtree.h	/^    float             _overlap;                   \/* overlapped ratio of quanbox *\/$/;"	m	struct:_quadtree_t
_quadbox_t	quadtree.h	/^typedef struct _quadbox_t$/;"	s
_quadnode_t	quadtree.h	/^typedef struct _quadnode_t$/;"	s
_quadtree_t	quadtree.h	/^typedef struct _quadtree_t$/;"	s
_root	quadtree.h	/^    quadnode_t        *_root;$/;"	m	struct:_quadtree_t
_sub	quadtree.h	/^    struct _quadnode_t    *_sub[QUAD_SUBNODES];        \/* pointer to subnodes of this node *\/$/;"	m	struct:_quadnode_t	typeref:struct:_quadnode_t::_quadnode_t
_xmax	quadtree.h	/^            _xmax,$/;"	m	struct:_quadbox_t
_xmin	quadtree.h	/^    double    _xmin,$/;"	m	struct:_quadbox_t
_ymax	quadtree.h	/^            _ymax;$/;"	m	struct:_quadbox_t
_ymin	quadtree.h	/^            _ymin,$/;"	m	struct:_quadbox_t
addmultinpc	bench.c	/^void addmultinpc()$/;"	f
addnpc	bench.c	/^int addnpc(char *name, int id, int pos_x, int pos_y)$/;"	f
addnpc	testmove.c	/^int addnpc(char *name, int id, int pos_x, int pos_y)$/;"	f
addnpc_bytxt	testmove.c	/^void addnpc_bytxt(char *name)$/;"	f
box	quadtree.py	/^    box = quad_box_t();$/;"	v
count	bench.c	/^static int count = 0;$/;"	v	file:
dumpallnpc	bench.c	/^void dumpallnpc()$/;"	f
dumpallnpc	testmove.c	/^void dumpallnpc()$/;"	f
id	bench.c	/^        int id;$/;"	m	struct:npc_	file:
id	testmove.c	/^        int id;$/;"	m	struct:npc_	file:
id_index	bench.c	/^static int id_index;$/;"	v	file:
id_index	testmove.c	/^static int id_index;$/;"	v	file:
list_add	list.h	/^static __inline__ void list_add(struct list_head *new_node, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static __inline__ void list_add_tail(struct list_head *new_node, struct list_head *head)$/;"	f
list_del	list.h	/^static __inline__ void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static __inline__ void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static __inline__ int list_empty(struct list_head *head)$/;"	f
list_entry	list.h	171;"	d
list_for_each	list.h	179;"	d
list_for_each_prev	list.h	198;"	d
list_for_each_safe	list.h	189;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_head_t	quadtree.py	/^class list_head_t(Structure):$/;"	c
list_join	list.h	/^static __inline__ void list_join(struct list_head *list, struct list_head *head)$/;"	f
list_t	list.h	/^typedef struct list_head list_t;$/;"	t	typeref:struct:list_head
main	bench.c	/^int main(int argc, char *argv[])$/;"	f
main	main.c	/^int main(void)$/;"	f
main	testmove.c	/^int main(int argc, char *argv[])$/;"	f
map_tree	bench.c	/^static quadtree_t *map_tree;$/;"	v	file:
map_tree	testmove.c	/^static quadtree_t *map_tree;$/;"	v	file:
name	bench.c	/^        char name[32];$/;"	m	struct:npc_	file:
name	testmove.c	/^        char name[32];$/;"	m	struct:npc_	file:
next	list.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	quadtree.h	/^     quadnode_t *node;$/;"	m	struct:quadtree_object
npc	bench.c	/^} npc;$/;"	t	typeref:struct:npc_	file:
npc	testmove.c	/^} npc;$/;"	t	typeref:struct:npc_	file:
npc_	bench.c	/^typedef struct npc_$/;"	s	file:
npc_	testmove.c	/^typedef struct npc_$/;"	s	file:
object	quadtree.h	/^     void *object;$/;"	m	struct:quadtree_object
pos_x	bench.c	/^        int pos_x, pos_y;$/;"	m	struct:npc_	file:
pos_x	testmove.c	/^        int pos_x, pos_y;$/;"	m	struct:npc_	file:
pos_y	bench.c	/^        int pos_x, pos_y;$/;"	m	struct:npc_	file:
pos_y	testmove.c	/^        int pos_x, pos_y;$/;"	m	struct:npc_	file:
prefetch	list.h	/^static __inline__ void prefetch(const void *x)$/;"	f
prefetch	list.h	20;"	d
prev	list.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
printbox	quadtree.c	/^static void printbox(quadnode_t *node)$/;"	f	file:
printnpc	bench.c	/^void printnpc(npc *t, void *param)$/;"	f
printnpc	testmove.c	/^void printnpc(npc *t, void *param)$/;"	f
printnpc_v3	bench.c	/^void printnpc_v3(struct list_head *l, void *param)$/;"	f
printnpc_v3	testmove.c	/^void printnpc_v3(struct list_head *l, void *param)$/;"	f
quad_box_t	quadtree.py	/^class quad_box_t(Structure):$/;"	c
quad_lst	bench.c	/^        struct list_head quad_lst;$/;"	m	struct:npc_	typeref:struct:npc_::list_head	file:
quad_lst	quadtree.h	/^     struct list_head quad_lst;$/;"	m	struct:quadtree_object	typeref:struct:quadtree_object::list_head
quad_lst	testmove.c	/^        struct list_head quad_lst;$/;"	m	struct:npc_	typeref:struct:npc_::list_head	file:
quad_travel	quadtree.c	/^void quad_travel(quadnode_t *current_node, quad_travel_func f, void *param)$/;"	f
quad_travel_func	quadtree.h	/^typedef void (*quad_travel_func)(struct list_head *, void *);$/;"	t
quadbox_height	quadtree.c	/^static double quadbox_height (const quadbox_t* qb)$/;"	f	file:
quadbox_inflate	quadtree.c	/^static void quadbox_inflate(quadbox_t* qb, double dx, double dy)$/;"	f	file:
quadbox_init	quadtree.c	/^static void quadbox_init (quadbox_t    *qb,$/;"	f	file:
quadbox_is_inside	quadtree.c	/^static int quadbox_is_inside(const quadbox_t* _first, const quadbox_t* _second)$/;"	f	file:
quadbox_is_overlapped	quadtree.c	/^static int quadbox_is_overlapped(const quadbox_t* _first, const quadbox_t* _second)$/;"	f	file:
quadbox_is_valid	quadtree.c	/^static int quadbox_is_valid (quadbox_t    *qb)$/;"	f	file:
quadbox_split	quadtree.c	/^static void quadbox_split(const quadbox_t* qb,$/;"	f	file:
quadbox_t	quadtree.h	/^}quadbox_t;$/;"	t	typeref:struct:_quadbox_t
quadbox_width	quadtree.c	/^static double quadbox_width (const quadbox_t* qb)$/;"	f	file:
quadnode_add_data	quadtree.c	/^static void quadnode_add_data ( quadnode_t* node, struct list_head *node_lst)$/;"	f	file:
quadnode_create	quadtree.c	/^static quadnode_t* quadnode_create (const quadbox_t* box)$/;"	f	file:
quadnode_create_child	quadtree.c	/^static void quadnode_create_child(quadnode_t* node, float overlap, int depth)$/;"	f	file:
quadnode_destroy	quadtree.c	/^static void quadnode_destroy(quadnode_t* node)$/;"	f	file:
quadnode_has_child	quadtree.c	/^static int quadnode_has_child(const quadnode_t* node)$/;"	f	file:
quadnode_has_data	quadtree.c	/^static int quadnode_has_data (const quadnode_t* node)$/;"	f	file:
quadnode_t	quadtree.h	/^}quadnode_t;$/;"	t	typeref:struct:_quadnode_t
quadtree	quadtree.py	/^    quadtree = quadtree("libquadtree.so")$/;"	v
quadtree	quadtree.py	/^class quadtree(object):$/;"	c
quadtree_create	quadtree.c	/^quadtree_create (quadbox_t    box,$/;"	f
quadtree_create	quadtree.py	/^    def quadtree_create(self,box,depth,overlap):$/;"	m	class:quadtree
quadtree_del_object	quadtree.c	/^void quadtree_del_object (quadtree_object_t *object)$/;"	f
quadtree_destroy	quadtree.c	/^quadtree_destroy (IN  quadtree_t    *qtree)$/;"	f
quadtree_insert	quadtree.c	/^quadtree_insert (IN  quadtree_t *qtree,$/;"	f
quadtree_insert_node	quadtree.c	/^static quadnode_t*  quadtree_insert_node ( quadtree_t *tree,$/;"	f	file:
quadtree_object	quadtree.h	/^typedef struct quadtree_object {$/;"	s
quadtree_object_t	quadtree.h	/^}quadtree_object_t;$/;"	t	typeref:struct:quadtree_object
quadtree_object_t	quadtree.py	/^class quadtree_object_t(Structure):$/;"	c
quadtree_search	quadtree.c	/^quadtree_search (IN  const quadtree_t    *qtree,$/;"	f
quadtree_search_nodes	quadtree.c	/^static void  quadtree_search_nodes (quadnode_t    *current_node,$/;"	f	file:
quadtree_t	quadtree.h	/^} quadtree_t;$/;"	t	typeref:struct:_quadtree_t
quadtree_t	quadtree.py	/^class quadtree_t(Structure):$/;"	c
quadtree_update	quadtree.c	/^quadtree_update (IN  quadtree_t            *qtree,$/;"	f
searchnpc	bench.c	/^void searchnpc(double min_x,double max_x,double min_y,double max_y)$/;"	f
searchnpc	testmove.c	/^void searchnpc()$/;"	f
time	quadtree.py	/^import time$/;"	i
tree	quadtree.py	/^    tree = quadtree.quadtree_create(box,5,0.1)$/;"	v
usage	testmove.c	/^void usage()$/;"	f
